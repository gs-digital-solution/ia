"""
Django settings for cis project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()
from django.urls import reverse_lazy
#print("DB_USER:", os.getenv('DB_USER'))
#print("DB_PASSWORD:", os.getenv('DB_PASSWORD'))



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'Stocké dans .env'
SECRET_KEY = os.getenv('SECRET_KEY')  # ← Stocké dans .env

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG =False
#pour passer en production et travailler en local aussi
#ALLOWED_HOSTS = ['185.215.167.178','cis.groupesiewe.com','127.0.0.1','localhost']
ALLOWED_HOSTS = [
    'cis.groupesiewe.com',
    '185.215.167.178',
    'speed.cloudflare.com',  # pour tes tests via Cloudflare Speed
    '127.0.0.1',
    'localhost',
]

CSRF_TRUSTED_ORIGINS = [
    'https://cis.groupesiewe.com',
    # tu peux ajouter ici d'autres origines si besoin
]
#ALLOWED_HOSTS = ['*','speed.cloudflare.com']
#pour faire des tests en local
#ALLOWED_HOSTS = ['127.0.0.1:8000','host']
#Cette config de ckeditor permet l’upload d’images depuis le back-office ou le front si tu ouvres les droits.
CKEDITOR_UPLOAD_PATH = "uploads_ckeditor/"

# Modèle utilisateur personnalisé
#AUTH_USER_MODEL = 'correction.Utilisateur'
# Application definition
INSTALLED_APPS = [
    'correction',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'resources',
    'ckeditor',
    'ckeditor_uploader',
    'smart_selects',
    'abonnement',
    'paiement',
    'rest_framework',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

CKEDITOR_UPLOAD_PATH = "uploads_ckeditor/"   # Dossier où seront stockées les images
CKEDITOR_IMAGE_BACKEND = "pillow"            # Nécessite pip install pillow
CKEDITOR_ALLOW_NONIMAGE_FILES = False
CKEDITOR_RESTRICT_BY_USER = False  # (à adapter selon ta politique admin)

# Configuration pour autoriser images collées/pdf (tweake "default" config)
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Full',
        'height': 350,
        'width': 'auto',
        'extraPlugins': ','.join([
            'uploadimage',
            'image'
        ]),
        'removeDialogTabs': 'image:advanced;image:Link',
        'filebrowserUploadUrl': '/ckeditor/upload/',
        'filebrowserBrowseUrl': '/ckeditor/browse/',
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cis.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cis.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
        'OPTIONS': {
            'connect_timeout': 5,
            'sslmode': os.getenv('DB_SSL_MODE', 'prefer'),
            'options': '-c search_path=public,django'
        },
        'CONN_MAX_AGE': 300,  # Maintenir les connexions 5 minutes
        'TEST': {
            'NAME': 'test_cis',  # Base de données de test séparée
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AUTH_USER_MODEL = "correction.CustomUser"


#pour rediriger l'utilisateur toujours vers la page soummettre quand le login est bon
LOGIN_REDIRECT_URL = reverse_lazy('correction:soumettre')
#pour rediriger l'utilisateur toujours vers la page de connexion lorsqu'il se déconnecte
LOGOUT_REDIRECT_URL = reverse_lazy('correction:login')
LOGIN_URL=reverse_lazy('correction:login')


CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"               # Ton provider SMTP réel
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "e.biblio24@gmail.com"     # Email technique utilisé pour l'envoi
EMAIL_HOST_PASSWORD = "smrw rjcz qbxa wzhv"      # Mot de passe ou app-password
DEFAULT_FROM_EMAIL = "CIS  <e.biblio24@gmail.com>"


# Email d’alerte admin CIS après chaque paiement
PAYMENT_ADMIN_EMAIL = "groupe.siewe.digital.solution@gmail.com"   # Mets ici le/les emails des admins ou du staff


# Configuration MathJax (si vous voulez vraiment l'utiliser)
MATHJAX_PATH = os.path.join(BASE_DIR, 'node_modules', 'mathjax')


# paramétrage du serveur pour afficher les erreurs mème en production
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        # Ecrit tout dans un fichier d'erreur dédié
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'django-error.log'),
        },
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'ERROR',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}
